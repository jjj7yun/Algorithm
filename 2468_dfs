import sys
n = int(input())
graph = [list(map(int, input().split())) for _ in range(n)]
h=(max(max(graph)))

visit = [[0]*n for _ in range(n)]
dx=[-1,1,0,0]
dy=[0,0,-1,1]
cnt = 0
def dfs(x,y):
    global cnt

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        if x<=-1 or x>= n or y <0 or y >= n :
            return False
        if graph[x][y] > k and visit[x][y] == 0:
            visit[x][y] = 1
            dfs(x,y)

result=[]
num=1
for k in range(h):
    cnt = 0
    visit = [[0]*n for _ in range(n)]

    for i in range(n):
        for j in range(n):
            if graph[i][j] > k and visit[i][j] == 0:
                visit[i][j] =1
                cnt +=1
                dfs(i,j)
    num = max(num,cnt)
print(num)



***다른 버전***

n=int(input())
graph=[]
graph = [list(map(int, input().split())) for _ in range(n)]

h = max(max(graph))

dx=[-1,1,0,0]
dy=[0,0,-1,1]

def dfs(x,y):

    if x < 0 or y < 0 or x>=n or y>=n:
        return False
    if visit[x][y]== 0 and graph[x][y]>k:
        visit[x][y] = 1
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            dfs(nx,ny)
        return True

num=1
for k in range(h):
    cnt = 0
    visit = [[0] * n for _ in range(n)]
    for i in range(n):
        for j in range(n):
            if dfs(i,j) == True:
                cnt+=1
    num = max(num,cnt)
print(num)

